Aggiorniamo pip alla versione 20.2 tramite il comando python -m pip install --upgrade pip e installiamo tensorflow-gpu 1.8.0 col comando pip install tensorflow-gpu==1.8.0 (sempre nell'environment Anaconda per la tesi) e procediamo con l'installazione di CuDNN 7 e CUDA 9, necessari per il funzionamento dell'accelerazione GPU (https://www.tensorflow.org/install/source), più precisamente di CuDNN 7.1.4, estraendone bin, include e lib in C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2 (https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.1.4/prod/9.2_20180516/cudnn-9.2-windows10-x64-v7.1) e CUDA 9.2(https://developer.nvidia.com/compute/cuda/9.2/Prod2/network_installers2/cuda_9.2.148_win10_network) (come indicato da https://www.pytorials.com/how-to-install-tensorflow-gpu-with-cuda-9-2-for-python-on-ubuntu/).
Procediamo dunque con la clonazione, nel luogo che ognuno ritiene più congeniale, della cartella Models per TensorFlow 1.8.0 col comando git clone https://github.com/tensorflow/models.git.
Installiamo le dependencies necessarie per far funzionare i modelli di object detecton della cartella Models seguendo le istruzioni https://github.com/tensorflow/models/blob/d530ac540b0103caa194b4824af353f1b073553b/research/object_detection/g3doc/installation.md, saltando la parte di pycocotools e tentando di installare manualmente Pillow 1.0, fallendo (nel processo sono stati installati Microsoft C++ Build Tools, a cui è stato aggiunto anche l'ultimo pacchetto dell'elenco base, Visual Studio Community 2019 con i Desktop tools per C++, e Visual Studio Community 2015) e optando per l'installazione di pillow indicata sulla guida.