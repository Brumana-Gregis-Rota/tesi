Aggiorniamo pip alla versione 20.2 tramite il comando python -m pip install --upgrade pip e installiamo tensorflow-gpu 1.8.0 col comando pip install tensorflow-gpu==1.8.0 (sempre nell'environment Anaconda per la tesi) e procediamo con l'installazione di CuDNN 7 e CUDA 9, necessari per il funzionamento dell'accelerazione GPU (https://www.tensorflow.org/install/source), più precisamente di CuDNN 7.1.4, estraendone bin, include e lib in C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2 (https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.1.4/prod/9.2_20180516/cudnn-9.2-windows10-x64-v7.1) e CUDA 9.2(https://developer.nvidia.com/compute/cuda/9.2/Prod2/network_installers2/cuda_9.2.148_win10_network) (come indicato da https://www.pytorials.com/how-to-install-tensorflow-gpu-with-cuda-9-2-for-python-on-ubuntu/).
Procediamo dunque con la clonazione, nel luogo che ognuno ritiene più congeniale, della cartella Models per TensorFlow 1.8.0 col comando git clone https://github.com/tensorflow/models.git.
Installiamo le dependencies necessarie per far funzionare i modelli di object detecton della cartella Models seguendo le istruzioni https://github.com/tensorflow/models/blob/d530ac540b0103caa194b4824af353f1b073553b/research/object_detection/g3doc/installation.md, saltando la parte di pycocotools e tentando di installare manualmente Pillow 1.0, fallendo (nel processo sono stati installati Microsoft C++ Build Tools, a cui è stato aggiunto anche l'ultimo pacchetto dell'elenco base, Visual Studio Community 2019 con i Desktop tools per C++, e Visual Studio Community 2015) e optando per l'installazione di Pillow generica, indicata sulla guida.
Procediamo poi con il download di protoc 3.12.4 (https://github.com/protocolbuffers/protobuf/releases/download/v3.12.4/protoc-3.12.4-win64.zip) e aggiungiamo la posizione del suo eseguibile nel path, di modo da poterlo chiamare tranquillamente da linea di comando per la compilazione col comando, da models/research, protoc object_detection/protos/*.proto --python_out=. .
Saltiamo la parte "Add libraries to PYTHONPATH" e procediamo con l'installazione dell'API di object detection, seguendo quanto indicato nel video e installando, prima di tutto, opencv col comando pip install opencv-python.
Dalla cartella models/research, python setup.py build e poi python setup.py install.
Testando l'installazione, come indicato nella pagina che spiega come procedere per l'installazione, emergono problemi relativi alla versione di CUDA (che dovrebbe essere 9.0). Procediamo con la disinstallazione di CUDA 9.2 e con l'installazione di CUDA 9.0 (https://developer.nvidia.com/compute/cuda/9.0/Prod/network_installers/cuda_9.0.176_win10_network-exe) e CuDNN 7.6.5 (https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/9.0_20191031/cudnn-9.0-windows10-x64-v7.6.5.32.zip).
Nascono tuttavia problemi relativi alla versione di Tensorflow che utilizziamo vs la versione di Tensorflow "richiesta" dal codice, quindi effettuiamo un upgrade all'ultima versione di Tensorflow 1.x col comando pip install --upgrade tensorflow-gpu==1.15 e di setuptools col comando pip install --upgrade setuptools.
Ci viene ora richiesto CUDA 10.0 (https://developer.nvidia.com/compute/cuda/10.0/Prod/network_installers/cuda_10.0.130_win10_network) e il relativo CuDNN 7.6.5 (https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.0_20191031/cudnn-10.0-windows10-x64-v7.6.5.32.zip).